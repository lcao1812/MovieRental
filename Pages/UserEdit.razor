@page "/edit/user/{UserId:guid}"


<h1> Editing Client: @_userToEdit.UserName</h1>

<EditForm Model="_userToEdit" OnValidSubmit="EditUserAsync">
    <div class="form-group mb-3">
        <label for="userName">Client Name</label>
        <InputText class="form-control" id="userName" placeholder="Enter User Name" @bind-Value="_userToEdit.UserName"></InputText>
    </div>
    
    <DataAnnotationsValidator />
    <ValidationSummary />

    <button class="btn btn-success" type="submit">Submit</button>
    <button class="btn btn-danger" @onclick="navigateRoot">Cancel</button>
</EditForm>

<div class="my-4">
    <h3>Renting</h3>
    <a href="/edit/user/@UserId/movies" class="btn btn-info btn-lg">Add movies</a>
    <table class="table table-responsive table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Date Rent</th>
                <th>Days In Possession</th>
                <th>Balance</th>
                <th>Action</th> 
            </tr>
        </thead>
        <tbody>

            @foreach (var movieCopy in _moviesRenting)
            {
                <tr>
                    <td>@(GetMovie(movieCopy.MovieId).MovieName)</td>
                    <td>@(movieCopy.DateRent == null ? "In Stock" : movieCopy.DateRent.ToString())</td>
                    <td>@(movieCopy.DateRent == null ? "In Stock" : CalculateDaysInPossession(movieCopy))</td>
                    <td>$@CalculateMovieBalance(movieCopy.MovieId)</td>
                    <td><button class="btn btn-md btn-warning" @onclick="() => this.ReturnRental(movieCopy.CopyId)">Return</button></td>
                </tr>
            }
        </tbody>
    </table>
</div>

@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

@code {
    [Parameter] public Guid UserId { get; set; }

    private User _userToEdit = null;
    private List<MovieCopy> _moviesRenting = null;
    private MovieCopy _copyRenting = null;
    private int lateFee = 0;

    protected override async Task OnParametersSetAsync()
    {
        using var context = new MovieRentalDBContext();    
        _userToEdit = await context.Users.FindAsync(UserId);

        _moviesRenting = (
            from movieCopy in context.MoviesCopy
            where (movieCopy.UserId == UserId)
            select movieCopy
        ).ToList();

    }

    private async Task EditUserAsync()
    {
        using var context = new MovieRentalDBContext();
        context.Users.Update(_userToEdit);

        if (await context.SaveChangesAsync() > 0)
        {
            this.navigateRoot();
        }
        else
        {
            string errorMessage = $"ERROR: Failed to edit the user \"{_userToEdit.UserName}\"";
            await JSRuntime.InvokeVoidAsync("alert", errorMessage);
        }
    }

    private async Task ReturnRental(Guid copyId)
    {
        using var context = new MovieRentalDBContext();
        _copyRenting = await context.MoviesCopy.FindAsync(copyId);
        _copyRenting.UserId = null;
        _copyRenting.DateRent = null;

        if (await context.SaveChangesAsync() > 0)
        {   
            // using a different context to update the _moviesRenting list to reflect correctly in the UI
            using var context_1 = new MovieRentalDBContext();
            _moviesRenting = (
                from movieCopy in context_1.MoviesCopy
                where (movieCopy.UserId == UserId)
                select movieCopy
            ).ToList();
        }
        else
        {
            string errorMessage = $"ERROR: Failed to return the copy \"{_userToEdit.UserName}\"";
            await JSRuntime.InvokeVoidAsync("alert", errorMessage);
        }

    }

    // Helper to get the movie information
    private Movie GetMovie(Guid currentMovieId)
    {
        using var context = new MovieRentalDBContext();
        Movie currentMovie = context.Movies.Find(currentMovieId);

        return currentMovie;
    }

    // Helper to calculate days in possession
    private int CalculateDaysInPossession(MovieCopy movieCopy)
    {
        DateTime dateRented = movieCopy.DateRent ?? DateTime.Now;

        int daysInPossession = (DateTime.Now - dateRented).Days;
        if (daysInPossession > 2)
        {   // client can only have the movie for 2 days, anything more will be $3 a day.
            lateFee += (daysInPossession - 2) * 3;
        }

        return daysInPossession;
    }

    private int CalculateMovieBalance(Guid movieId)
    {
        int basePrice = 0;
        int discount = 0;

        using var context = new MovieRentalDBContext();
        int yearReleased = context.Movies.Find(movieId).MovieYear;
        int daysRegistered = (DateTime.Now - context.Users.Find(UserId).JoinDate).Days;
        basePrice = yearReleased >= 2000 ? 10 : 5;
        discount = daysRegistered >= 365 ? 3 : 0;

        int retVal = basePrice - discount + lateFee;
        basePrice = 0;
        discount = 0;
        lateFee = 0;

        return retVal;
    }

    // Helper to navigate back to the root respective of the current page
    private void navigateRoot()
    {
        NavigationManager.NavigateTo("/users");
    }


}
